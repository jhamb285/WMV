'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { HierarchicalFilterState } from '@/types';
import FilterSection from './FilterSection';
import FilterActionBar from './FilterActionBar';

interface FilterBottomSheetProps {
  isOpen: boolean;
  onClose: () => void;
  filters: HierarchicalFilterState;
  onFiltersChange: (filters: HierarchicalFilterState) => void;
  filterOptions: {
    areas: string[];
    vibes: string[];
    dates: string[];
    genres: string[];
  };
}

interface FilterSectionConfig {
  id: string;
  title: string;
  type: 'pills' | 'range' | 'collapsible';
  isCollapsible: boolean;
  isExpanded: boolean;
  options: string[];
  selectedValues: string[];
}

const FilterBottomSheet: React.FC<FilterBottomSheetProps> = ({
  isOpen,
  onClose,
  filters,
  onFiltersChange,
  filterOptions
}) => {
  // Temporary filter state for apply/cancel functionality
  const [tempFilters, setTempFilters] = useState<HierarchicalFilterState>(filters);
  const [expandedSections, setExpandedSections] = useState<string[]>(['selectedAreas']);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // Update temp filters when props change (on initial open)
  useEffect(() => {
    if (isOpen) {
      setTempFilters(filters);
      setHasUnsavedChanges(false);
    }
  }, [isOpen, filters]);

  // Check for unsaved changes
  useEffect(() => {
    const hasChanges = JSON.stringify(tempFilters) !== JSON.stringify(filters);
    setHasUnsavedChanges(hasChanges);
  }, [tempFilters, filters]);

  const filterSections: FilterSectionConfig[] = [
    {
      id: 'selectedAreas',
      title: 'Areas',
      type: 'collapsible',
      isCollapsible: true,
      isExpanded: expandedSections.includes('selectedAreas'),
      options: filterOptions.areas,
      selectedValues: tempFilters.selectedAreas
    },
    {
      id: 'activeVibes',
      title: 'Vibes',
      type: 'collapsible',
      isCollapsible: true,
      isExpanded: expandedSections.includes('activeVibes'),
      options: filterOptions.vibes,
      selectedValues: tempFilters.activeVibes
    },
    {
      id: 'activeDates',
      title: 'Dates',
      type: 'collapsible',
      isCollapsible: true,
      isExpanded: expandedSections.includes('activeDates'),
      options: filterOptions.dates,
      selectedValues: tempFilters.activeDates
    },
    {
      id: 'activeGenres',
      title: 'Music Genres',
      type: 'collapsible',
      isCollapsible: true,
      isExpanded: expandedSections.includes('activeGenres'),
      options: filterOptions.genres,
      selectedValues: tempFilters.activeGenres
    }
  ];

  const handleSectionToggle = (sectionId: string) => {
    setExpandedSections(prev =>
      prev.includes(sectionId)
        ? prev.filter(id => id !== sectionId)
        : [sectionId] // Only allow one section expanded at a time
    );
  };

  const handleFilterChange = (sectionId: keyof FilterState, selectedValues: string[]) => {
    setTempFilters(prev => ({
      ...prev,
      [sectionId]: selectedValues
    }));
  };

  const handleApply = () => {
    onFiltersChange(tempFilters);
    setHasUnsavedChanges(false);
    onClose();
  };

  const handleCancel = () => {
    setTempFilters(filters);
    setHasUnsavedChanges(false);
    onClose();
  };

  const handleClearAll = () => {
    const clearedFilters: FilterState = {
      selectedAreas: ['All Dubai'],
      activeVibes: [],
      activeDates: [],
      activeGenres: [],
      activeOffers: [],
      searchQuery: ''
    };
    setTempFilters(clearedFilters);
  };

  const getAllSelectedFilters = () => {
    const selected: Array<{ label: string; type: string; color: string; onRemove: () => void }> = [];

    // Areas (exclude "All Dubai")
    tempFilters.selectedAreas.filter(area => area !== 'All Dubai').forEach(area => {
      selected.push({
        label: area,
        type: 'area',
        color: 'bg-[#B9D3C2]/80 border-[#B9D3C2]',
        onRemove: () => {
          const newAreas = tempFilters.selectedAreas.filter(a => a !== area);
          const finalAreas = newAreas.length === 0 ? ['All Dubai'] : newAreas;
          handleFilterChange('selectedAreas', finalAreas);
        }
      });
    });

    // Vibes
    tempFilters.activeVibes.forEach(vibe => {
      selected.push({
        label: vibe,
        type: 'vibe',
        color: 'bg-lime-500/80 border-lime-400',
        onRemove: () => {
          handleFilterChange('activeVibes', tempFilters.activeVibes.filter(v => v !== vibe));
        }
      });
    });

    // Dates
    tempFilters.activeDates.forEach(date => {
      selected.push({
        label: date,
        type: 'date',
        color: 'bg-cyan-500/80 border-cyan-400',
        onRemove: () => {
          handleFilterChange('activeDates', tempFilters.activeDates.filter(d => d !== date));
        }
      });
    });

    // Genres
    tempFilters.activeGenres.forEach(genre => {
      selected.push({
        label: genre,
        type: 'genre',
        color: 'bg-amber-500/80 border-amber-400',
        onRemove: () => {
          handleFilterChange('activeGenres', tempFilters.activeGenres.filter(g => g !== genre));
        }
      });
    });

    return selected;
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/30 backdrop-blur-sm z-40"
            onClick={onClose}
          />

          {/* Bottom Sheet */}
          <motion.div
            initial={{ y: '100%', opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: '100%', opacity: 0 }}
            transition={{
              type: 'spring',
              damping: 25,
              stiffness: 300,
              duration: 0.3
            }}
            className="fixed bottom-0 left-0 right-0 z-50"
            style={{ top: 'auto' }}
          >
            <div className="filter-bottom-sheet rounded-t-3xl shadow-2xl relative">
              {/* Handle Bar */}
              <div className="flex justify-center pt-3 pb-2">
                <div className="w-12 h-1 bg-white/30 rounded-full" />
              </div>

              {/* Header */}
              <div className="px-4 py-2">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="font-geist text-lg font-semibold text-white">
                      Filter by
                    </h2>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={handleClearAll}
                      className="font-geist text-sm text-white/60 hover:text-white/80 px-2 py-1 rounded-md hover:bg-white/10"
                    >
                      Clear All
                    </button>
                    <button
                      onClick={onClose}
                      className="p-1 rounded-full bg-white/10 hover:bg-white/20"
                    >
                      <X className="w-4 h-4 text-white/80" />
                    </button>
                  </div>
                </div>
              </div>

              {/* Selected Filters Tags */}
              {getAllSelectedFilters().length > 0 && (
                <div className="px-4 py-1.5">
                  <div className="flex flex-wrap gap-1">
                    {getAllSelectedFilters().map((filter, index) => (
                      <motion.div
                        key={`${filter.type}-${filter.label}-${index}`}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.8 }}
                        className={`flex items-center border rounded-full px-2 py-0.5 ${filter.color}`}
                      >
                        <span className="font-geist text-sm text-white/90 mr-1">
                          {filter.label}
                        </span>
                        <button
                          onClick={filter.onRemove}
                          className="text-white/60 hover:text-white/90"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </motion.div>
                    ))}
                  </div>
                </div>
              )}

              {/* Filter Content */}
              <div className="px-4 py-3 pb-32 max-h-[50vh] overflow-y-auto scrollbar-thin">
                <div className="grid grid-cols-2 gap-2">
                  {filterSections
                    .sort((a, b) => {
                      // Put expanded sections first
                      if (a.isExpanded && !b.isExpanded) return -1;
                      if (!a.isExpanded && b.isExpanded) return 1;
                      return 0;
                    })
                    .map((section) => (
                      <FilterSection
                        key={section.id}
                        section={section}
                        onToggle={() => handleSectionToggle(section.id)}
                        onSelectionChange={(selectedValues) =>
                          handleFilterChange(section.id, selectedValues)
                        }
                      />
                    ))}
                </div>
              </div>

              {/* Fixed Action Bar */}
              <div className="absolute bottom-0 left-0 right-0">
                <FilterActionBar
                  onCancel={handleCancel}
                  onApply={handleApply}
                  hasUnsavedChanges={hasUnsavedChanges}
                  selectedCount={
                    tempFilters.selectedAreas.filter(a => a !== 'All Dubai').length +
                    tempFilters.activeVibes.length +
                    tempFilters.activeDates.length +
                    tempFilters.activeGenres.length
                  }
                />
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default FilterBottomSheet;